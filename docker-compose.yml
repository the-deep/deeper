version: '3.2'


x-server: &base_server_setup
  build:
    context: ./server/
  # To attach to container with stdin `docker attach <container_name>`
  # Used for python debugging.
  stdin_open: true
  tty: true
  environment: &base_server_environment
    # To overwrite this values. set the values in .env
    DJANGO_DEBUG: ${DJANGO_DEBUG:-True}
    DEEP_ENVIRONMENT: ${DEEP_ENVIRONMENT:-development}
    DEEP_FRONTEND_HOST: ${DEEP_FRONTEND_HOST:-localhost:3000}
    DEEP_FRONTEND_ARY_HOST: ${DEEP_FRONTEND_ARY_HOST:-localhost:3001}
    DEEP_BACKEND_HOST: ${DEEP_BACKEND_HOST:-localhost:8000}
    DJANGO_ALLOWED_HOST: ${DJANGO_ALLOWED_HOST:-localhost}
    SESSION_COOKIE_DOMAIN: ${SESSION_COOKIE_DOMAIN:-localhost}
    CSRF_COOKIE_DOMAIN: ${CSRF_COOKIE_DOMAIN:-localhost}
    EMAIL_FROM: ${EMAIL_FROM:-dev@thedeep.io}
    # From db.environment
    DATABASE_NAME: ${DATABASE_NAME:-deep}
    DATABASE_USER: ${DATABASE_USER:-postgres}
    DATABASE_PASSWORD: ${DATABASE_PASSWORD:-postgres}
    DATABASE_PORT: ${DATABASE_PORT:-5432}
    DATABASE_HOST: ${DATABASE_HOST:-db}
    # From redis
    CELERY_REDIS_URL: ${CELERY_REDIS_URL:-redis://redis:6379/0}
    DJANGO_CACHE_REDIS_URL: ${DJANGO_CACHE_REDIS_URL:-redis://redis:6379/2}
    TEST_DJANGO_CACHE_REDIS_URL: ${TEST_DJANGO_CACHE_REDIS_URL:-redis://redis:6379/12}
    # DEEPL Service
    DEEPL_SERVICE_DOMAIN: ${DEEPL_SERVICE_DOMAIN:-http://extractor:8001}
    DEEPL_SERVICE_CALLBACK_DOMAIN: ${DEEPL_SERVICE_CALLBACK_DOMAIN:-http://web:8000}
    # DEEPL Server -> https://github.com/the-deep-nlp
    DEEPL_SERVER_TOKEN: ${DEEPL_SERVER_TOKEN?err}
    DEEPL_SERVER_DOMAIN: ${DEEPL_SERVER_DOMAIN?err}
    DEEPL_SERVER_CALLBACK_DOMAIN: ${DEEPL_SERVER_CALLBACK_DOMAIN?err}
  env_file:
    - .env
  extra_hosts:
      - "host.docker.internal:host-gateway"
  volumes:
    - ./server/:/code
    - media:/media
    - ipython_data_local:/root/.ipython/profile_default   # persist ipython data, including ipython history
  depends_on:
      - db
      - redis
      - extractor

x-client: &base_client_setup
  tty: true
  environment:
    # To overwrite this values. set the values in .env
    GRAPHQL_CODEGEN_ENDPOINT: ${GRAPHQL_CODEGEN_ENDPOINT:-http://web:8000/graphql}
    REACT_APP_GRAPHQL_ENDPOINT: ${REACT_APP_GRAPHQL_ENDPOINT:-http://localhost:8000/graphql}
    REACT_APP_STATIC_ENDPOINT: ${REACT_APP_STATIC_ENDPOINT:-http://localhost:8000}
    REACT_APP_API_HTTPS: ${REACT_APP_API_HTTPS:-http}
    REACT_APP_API_END: ${REACT_APP_API_END:-localhost:8000}
    REACT_APP_ADMIN_END: ${REACT_APP_ADMIN_END:-localhost:8000}
    REACT_APP_PDF_CACHE_ENDPOINT: ${REACT_APP_PDF_CACHE_ENDPOINT:-https://snapshot-proxy.thedeep.io}
    REACT_APP_DEEP_ENVIRONMENT: ${REACT_APP_DEEP_ENVIRONMENT:-development}
    REACT_APP_ASSESSMENT_REGISTRY_END: ${REACT_APP_ASSESSMENT_REGISTRY_END:-http://localhost:3001}
    REACT_APP_GA_MEASUREMENT_ID: ${REACT_APP_GA_MEASUREMENT_ID:-}
  extra_hosts:
      - "host.docker.internal:host-gateway"
  env_file:
    - .env
  command: bash -c '/code/scripts/run_develop.sh'

services:
  db:
    image: postgis/postgis:13-3.1-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: deep
    volumes:
      - postgres-data13:/var/lib/postgresql/data
    # command: postgres -c log_statement=all
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    <<: *base_server_setup
    image: docker.pkg.github.com/the-deep/server/web:latest
    build:
      context: ./server/
      target: web
    environment:
      <<: *base_server_environment
      SERVICE_ENVIRONMENT_TYPE: web
    command: bash -c 'wait-for-it $$DATABASE_HOST:$$DATABASE_PORT && /code/scripts/run_web.sh'
    ports:
      - '8000:8000'

  worker:
    <<: *base_server_setup
    image: docker.pkg.github.com/the-deep/server/worker:latest
    build:
      context: ./server/
      target: worker
    environment:
      <<: *base_server_environment
      SERVICE_ENVIRONMENT_TYPE: worker
    command: bash -c '/code/scripts/run_worker.sh'
    healthcheck:
      test: ["CMD-SHELL", "celery -A deep inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  client:
    <<: *base_client_setup
    image: docker.pkg.github.com/the-deep/client:latest
    build:
      context: ./client/
    volumes:
      - ./client/:/code
    ports:
      - '3000:3000'

  ary-client:
    <<: *base_client_setup
    image: docker.pkg.github.com/the-deep/ary-only-client:latest
    build:
      context: ./ary-only-client/
    volumes:
      - ./ary-only-client/:/code
    ports:
      - '3001:3000'

  extractor:
    image: docker.pkg.github.com/the-deep/deepl-service:latest
    build:
      context: ./deepl-service/
    command: bash -c '/code/scripts/run_develop.sh'
    tty: true
    environment:
      EXTRACTOR_DOMAIN_NAME: ${EXTRACTOR_DOMAIN_NAME:-http://extractor:8001}
      EXTRACTOR_REDIS_URL: ${EXTRACTOR_REDIS_URL:-redis://redis:6379/3}
    volumes:
       - ./deepl-service/:/code
    depends_on:
      - redis

volumes:
  media:
  postgres-data13:
  redis-data:
  ipython_data_local:
